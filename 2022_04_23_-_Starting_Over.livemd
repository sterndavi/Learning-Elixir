# 23/04 - 24/04 - starting over

## Section

```elixir
defmodule Retangule do
  def area(a, b) do
    a * b
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Retangule, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:area, 2}}
```

```elixir
Retangule.area(2, 4)
```

<!-- livebook:{"output":true} -->

```
8
```

```elixir
defmodule TestPrivate do
  def double(a) do
    sum(a, a)
  end

  defp sum(a, b) do
    a + b
  end
end

TestPrivate.double(1)
```

<!-- livebook:{"output":true} -->

```
2
```

```elixir
defmodule MyModule do
  import IO

  def my_function do
    puts("Calling imported function")
  end
end

MyModule.my_function()
```

<!-- livebook:{"output":true} -->

```
Calling imported function
```

<!-- livebook:{"output":true} -->

```
:ok
```

**2.3.6 Module attributes**

The purpose of module attributes is twofold: they can be used as compile-time constants,
and you can register any attribute, which can then be queried in runtime.

```elixir
defmodule Circle do
  @moduledoc "implements basic circle functions"
  # Defines a module attribute
  @pi 3.14159

  @moduledoc "area"
  @spec area(number) :: number
  def area(r), do: r * r * @pi

  @spec circumference(number) :: number
  @moduledoc "circumference"
  def circumference(r), do: 2 * r * @pi
end
```

<!-- livebook:{"output":true} -->

```
warning: redefining @moduledoc attribute previously set at line 2
  190422 coming back.livemd#cell:6: Circle (module)

warning: redefining @moduledoc attribute previously set at line 6
  190422 coming back.livemd#cell:11: Circle (module)

```

<!-- livebook:{"output":true} -->

```
{:module, Circle, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:circumference, 1}}
```

```elixir
defmodule StringHelpers do
  @type word() :: String.t()

  @spec long_word?(word()) :: boolean()
  def long_word?(word) when is_binary(word) do
    String.length(word) > 8
  end
end

StringHelpers.long_word?("memesss")
```

<!-- livebook:{"output":true} -->

```
false
```

```elixir
defmodule Circle do
  @moduledoc "implements basic circle functions"
  # Defines a module attribute
  @pi 3.14159

  @moduledoc "area"
  # here the first part of spec defines what the function is expecting,
  @spec area(number) :: number
  # and after :: it defines the output's format
  def area(r), do: r * r * @pi

  @spec circumference(number) :: number
  @moduledoc "circumference"
  def circumference(r), do: 2 * r * @pi
end
```

<!-- livebook:{"output":true} -->

```
warning: redefining @moduledoc attribute previously set at line 2
  190422 coming back.livemd#cell:6: Circle (module)

warning: redefining @moduledoc attribute previously set at line 6
  190422 coming back.livemd#cell:13: Circle (module)

```

<!-- livebook:{"output":true} -->

```
{:module, Circle, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:circumference, 1}}
```

```elixir
# the || short circuit operator will return the first non-falsy element

nil || false || 1 || true || 5
```

<!-- livebook:{"output":true} -->

```
1
```

```elixir
# the && operator returns the second expression,
# but only if the first expression is truthy.
# Otherwise, it returns the first expression without evaluating the second one

true && 5

# $ 5

false && 5

# $ false
```

<!-- livebook:{"output":true} -->

```
false
```

```elixir
# Short-circuiting can be used for operation chaining,
# lets say that you'll need to fetch a value from cache, disk or remote database,
# you can do something like this:

# read_cache || read_from_disk || read_from_database

# also you can use the && operator to ensure that certain conditions are met:

# database_value = conection_stablished? && read_data
```

<!-- livebook:{"output":true} -->

```
nil
```

**tuples**

```elixir
person = {"bob", 25}

age = elem(person, 1)
name = elem(person, 0)

person = {name, age}
```

<!-- livebook:{"output":true} -->

```
{"bob", 25}
```

**lists**

```elixir
prime_numbers = [2, 3, 5, 7]

[head | tail] = [1, 2, 3, 4]
```

<!-- livebook:{"output":true} -->

```
[1, 2, 3, 4]
```

```elixir
[1, 2, 3] ++ [4, 5]
```

<!-- livebook:{"output":true} -->

```
[1, 2, 3, 4, 5]
```

**maps**

```elixir
empty_map = %{}
```

<!-- livebook:{"output":true} -->

```
%{}
```

```elixir
squares = %{1 => 1, 2 => 4, 3 => 9}

squares[3]
```

<!-- livebook:{"output":true} -->

```
9
```

```elixir
# alternatively:

squares = Map.new([{1, 1}, {2, 4}, {3, 9}])
```

<!-- livebook:{"output":true} -->

```
%{1 => 1, 2 => 4, 3 => 9}
```

**first class functions**

```elixir
square = fn x ->
  x * x
end
```

<!-- livebook:{"output":true} -->

```
#Function<44.65746770/1 in :erl_eval.expr/5>
```

```elixir
square.(5)
```

<!-- livebook:{"output":true} -->

```
25
```

```elixir
print_element = fn x -> IO.puts(x) end

[1, 2, 3]
|> Enum.each(print_element)
```

<!-- livebook:{"output":true} -->

```
1
2
3
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
[1, 2, 3]
|> Enum.each(fn x -> IO.puts(x) end)
```

<!-- livebook:{"output":true} -->

```
1
2
3
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
Enum.each(
  [1, 2, 3],
  &IO.puts/1
)
```

<!-- livebook:{"output":true} -->

```
1
2
3
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
lamda = fn x, y, z -> x * y * z end

# is the same as:

lambda = &(&1 * &2 * &3)

lambda.(2, 3, 4)
```

<!-- livebook:{"output":true} -->

```
24
```

**operators**

```elixir
# weak equality
1 == 1.0
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
# strict equality
1 === 1.0
```

<!-- livebook:{"output":true} -->

```
false
```

**pattern matching**

```elixir
{name, age} = {"bob", 25}
```

<!-- livebook:{"output":true} -->

```
{"bob", 25}
```

```elixir
{{year, month, day}, {hour, minutes, seconds}} = :calendar.local_time()
```

<!-- livebook:{"output":true} -->

```
{{2022, 4, 24}, {11, 58, 30}}
```

```elixir
defmodule Retangule do
  def area({a, b}) do
    a * b
  end
end

Retangule.area({3, 2})
```

<!-- livebook:{"output":true} -->

```
6
```

**multiclause functions**

```elixir
# defining shapes

defmodule Geometry do
  def area({:retangle, a, b}) do
    a * b
  end

  def area({:square, a}) do
    a * a
  end

  @pi 3.14159
  def area({:circle, r}) do
    r * r * @pi
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Geometry, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:area, 1}}
```

```elixir
Geometry.area({:circle, 3})
```

<!-- livebook:{"output":true} -->

```
28.27431
```

```elixir
fun = &Geometry.area/1

fun.({:square, 3})
```

<!-- livebook:{"output":true} -->

```
9
```

```elixir
# Sometimes youâ€™ll want a function to return a term indicating a failure, rather than
# raising an error. You can introduce a default clause that always matches.
```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
defmodule Geometry do
  def area({:retangle, a, b}) do
    a * b
  end

  def area({:square, a}) do
    a * a
  end

  @pi 3.14159
  def area({:circle, r}) do
    r * r * @pi
  end

  def area(unknown) do
    {:error, {:unknown_shape, unknown}}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Geometry, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:area, 1}}
```

**guards**

```elixir
defmodule TestNum do
  def test(x) when x < 0 do
    :negative
  end

  def test(x) when x > 0 do
    :positive
  end

  def test(0), do: :zero
end

TestNum.test(3)
```

<!-- livebook:{"output":true} -->

```
:positive
```

```elixir
defmodule TestNum do
  def test(x) when is_number(x) and x < 0 do
    :negative
  end

  def test(x) when is_number(x) and x > 0 do
    :positive
  end

  def test(0), do: :zero
end
```

<!-- livebook:{"output":true} -->

```
{:module, TestNum, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:test, 1}}
```

```elixir
defmodule ListHelper do
  def smallest(list) when length(list) > 0 do
    Enum.min(list)
  end

  def smallest(_) do
    {:error, :invalid_argument}
  end
end

ListHelper.smallest([5, 5, 3, 6, 7])
ListHelper.smallest(123)
```

<!-- livebook:{"output":true} -->

```
{:error, :invalid_argument}
```

**multiclause lambdas**

```elixir
testnum = fn
  x when is_number(x) and x < 0 ->
    :negative

  0 ->
    :zero

  x when is_number(x) and x > 0 ->
    :positive
end

testnum.(0)
```

<!-- livebook:{"output":true} -->

```
:zero
```

**branching with multiclause functions**

```elixir
defmodule TestList do
  def empty?([]), do: true
  def empty?([_ | _]), do: false
end
```

<!-- livebook:{"output":true} -->

```
{:module, TestList, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:empty?, 1}}
```

```elixir
TestList.empty?([1, 2, 34])
```

<!-- livebook:{"output":true} -->

```
false
```

```elixir
defmodule Polymorphic do
  def double(x) when is_number(x), do: 2 * x
  def double(x) when is_binary(x), do: x <> x
end
```

<!-- livebook:{"output":true} -->

```
{:module, Polymorphic, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:double, 1}}
```

```elixir
Polymorphic.double("me")
# $ meme

Polymorphic.double(3)
# $ 6
```

<!-- livebook:{"output":true} -->

```
6
```

```elixir
defmodule Factorial do
  def factorial(0), do: 1
  def factorial(n), do: n * factorial(n - 1)
end

Factorial.factorial(3)
```

<!-- livebook:{"output":true} -->

```
6
```

```elixir
opts = %{width: 10, height: 15}

with {:ok, width} <- Map.fetch(opts, :width),

     {:ok, height} <- Map.fetch(opts, :height) do

  {:ok, width * height}

enddef
```

```elixir
defmodule ListHelper do
  def sum([]), do: 0

  def sum([head | tail]) do
    head + sum(tail)
  end
end

ListHelper.sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 4, 5, 7])
```

<!-- livebook:{"output":true} -->

```
73
```

```elixir
# tail recursive sum

defmodule ListHelper do
  def sum(list) do
    do_sum(0, list)
  end

  defp do_sum(current_sum, []) do
    current_sum
  end

  defp do_sum(current_sum, [head | tail]) do
    new_sum = head + current_sum
    do_sum(new_sum, tail)
  end
end

ListHelper.sum([1, 3, 4])
```

<!-- livebook:{"output":true} -->

```
8
```

```elixir
[head | tail] = [1, 2, 3]
tail
```

<!-- livebook:{"output":true} -->

```
[2, 3]
```

```elixir
# exercise: write a recursive function to find the lenght of a list

defmodule Exercise1 do
  # makes so that the main function is a call to a private multiclause one
  def leng(list) do
    p_leng(list, 0)
  end

  # the exit clause that returns the length
  defp p_leng([], len) do
    len
  end

  # the magic happens here
  defp p_leng([_ | tail], len) do
    # the function call itself and adds 1 to len everytime
    p_leng(tail, len + 1)
  end

  # until the list is over                      
end

Exercise.leng([1, 2, 3, 4, 5, 6])
```

```elixir
# exercise: write a recursive function that takes 2 arguments: from and to, and returns
# a list with all values in the range

defmodule Exercise2 do
  def range(from, to) do
    # the [] is the output empty list
    p_range(from, to, [])
  end

  # we know the recursion is over when from is bigger than to
  defp p_range(from, to, result) when from > to do
    result
  end

  defp p_range(from, to, result) do
    p_range(from, to - 1, [to | result])
  end
end

Exercise2.range(3, 30)
```

<!-- livebook:{"output":true} -->

```
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
 29, 30]
```

```elixir
Enum.map(
  [1, 2, 3],
  fn x -> 2 * x end
)
```

<!-- livebook:{"output":true} -->

```
[2, 4, 6]
```

```elixir
Enum.filter(
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
  fn x -> rem(x, 2) == 1 end
)
```

<!-- livebook:{"output":true} -->

```
[1, 3, 5, 7, 9]
```

```elixir
Enum.reduce(
  # elements to reduce
  [1, 2, 3],
  # initial value of the acumulator
  0,
  # anonymous functon that sums every element of the list
  fn element, sum -> sum + element end
)
```

<!-- livebook:{"output":true} -->

```
6
```

```elixir
# this example also works when there's also non numbers in the list
Enum.reduce(
  [1, 2, "not a number", :atom, 3],
  0,
  fn
    element, sum when is_number(element) ->
      sum + element

    _, sum ->
      sum
  end
)
```

<!-- livebook:{"output":true} -->

```
6
```

```elixir
defmodule NumHelper do
  def sum_nums(enumerable) do
    Enum.reduce(enumerable, 0, &add_num/2)
  end

  defp add_num(num, sum) when is_number(num), do: sum + num
  defp add_num(_, sum), do: sum
end

NumHelper.sum_nums([1, 2, 3])
```

<!-- livebook:{"output":true} -->

```
6
```

**comprehensions**

```elixir
for x <- [1, 2, 3] do
  x * x
end

memes
```

<!-- livebook:{"output":true} -->

```
[1, 4, 9]
```

```elixir
for x <- [1, 2, 3], y <- [1, 2, 3], do: {x, y, x * y}
```

<!-- livebook:{"output":true} -->

```
[{1, 1, 1}, {1, 2, 2}, {1, 3, 3}, {2, 1, 2}, {2, 2, 4}, {2, 3, 6}, {3, 1, 3}, {3, 2, 6}, {3, 3, 9}]
```

```elixir
for x <- 1..10, y <- 1..9, do: {x, y, x * y}
```

<!-- livebook:{"output":true} -->

```
[
  {1, 1, 1},
  {1, 2, 2},
  {1, 3, 3},
  {1, 4, 4},
  {1, 5, 5},
  {1, 6, 6},
  {1, 7, 7},
  {1, 8, 8},
  {1, 9, 9},
  {2, 1, 2},
  {2, 2, 4},
  {2, 3, 6},
  {2, 4, 8},
  {2, 5, 10},
  {2, 6, 12},
  {2, 7, 14},
  {2, 8, 16},
  {2, 9, 18},
  {3, 1, 3},
  {3, 2, 6},
  {3, 3, 9},
  {3, 4, 12},
  {3, 5, 15},
  {3, 6, 18},
  {3, 7, 21},
  {3, 8, 24},
  {3, 9, 27},
  {4, 1, 4},
  {4, 2, 8},
  {4, 3, 12},
  {4, 4, 16},
  {4, 5, 20},
  {4, 6, 24},
  {4, 7, 28},
  {4, 8, 32},
  {4, 9, 36},
  {5, 1, 5},
  {5, 2, 10},
  {5, 3, 15},
  {5, 4, 20},
  {5, 5, 25},
  {5, 6, 30},
  {5, 7, 35},
  {5, 8, 40},
  {5, 9, 45},
  {6, 1, 6},
  {6, 2, 12},
  {6, 3, ...},
  {6, ...},
  {...},
  ...
]
```

```elixir
# defines the ranges
multiplication_table =
  for x <- 1..9,
      y <- 1..9,
      # into:%{} specifies where the values will be stored, in this case, a map
      into: %{} do
    # a map where the keys are the multiplicants, and the value are the result
    {{x, y}, x * y}
  end

# searching the table with a combination of 2 numbers will return the product
multiplication_table[{6, 9}]
```

<!-- livebook:{"output":true} -->

```
54
```

```elixir
multiplication_table_filtered =
  for x <- 1..9,
      y <- 1..9,
      # filtering is also possible
      x <= y,
      into: %{} do
    {{x, y}, x * y}
  end

multiplication_table_filtered[{8, 7}]
```

<!-- livebook:{"output":true} -->

```
nil
```

**streams**

```elixir
employees = ["Alice", "Bob", "John"]
```

<!-- livebook:{"output":true} -->

```
["Alice", "Bob", "John"]
```

```elixir
Enum.with_index(employees)
```

<!-- livebook:{"output":true} -->

```
[{"Alice", 0}, {"Bob", 1}, {"John", 2}]
```

```elixir
employees
|> Enum.with_index()
|> Enum.each(fn {employee, index} ->
  IO.puts("#{index + 1}. #{employee}")
end)
```

<!-- livebook:{"output":true} -->

```
1. Alice
2. Bob
3. John
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
stream =
  [1, 2, 3]
  |> Stream.map(fn x -> x * 2 end)
  |> Enum.to_list()
```

<!-- livebook:{"output":true} -->

```
[2, 4, 6]
```

```elixir
Enum.take(stream, 2)
```

<!-- livebook:{"output":true} -->

```
[2, 4]
```

```elixir
employees
|> Stream.with_index()
|> Enum.each(fn {employee, index} ->
  IO.puts("#{index + 1}. #{employee}")
end)
```

<!-- livebook:{"output":true} -->

```
1. Alice
2. Bob
3. John
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
[9, -1, "foo", 25, 49]
|> Stream.filter(&(is_number(&1) and &1 > 0))
|> Stream.map(&{&1, :math.sqrt(&1)})
|> Stream.with_index()
|> Enum.each(fn {{input, result}, index} ->
  IO.puts("#{index + 1}. sqrt(#{input}) = #{result}")
end)
```

<!-- livebook:{"output":true} -->

```
1. sqrt(9) = 3.0
2. sqrt(25) = 5.0
3. sqrt(49) = 7.0
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
# exercise 1 streams
path = "C:/Users/Davi/Desktop/test.txt"

defmodule ExerciseStreams do
  defp filtered_lines(path) do
    path
    |> File.stream!()
    |> Stream.map(&String.replace(&1, "\n", ""))
  end

  def line_length(path) do
    path
    |> filtered_lines()
    |> Enum.map(&String.length/1)
  end
end

ExerciseStreams.line_length(path)
```

```elixir
defmodule EnumStreams do
  defp filtered_lines!(path) do
    path
    |> File.stream!()
    |> Stream.map(&String.replace(&1, "\n", ""))
  end

  def lines_lengths!(path) do
    path
    |> filtered_lines!()
    |> Enum.map(&String.length/1)
  end
end
```

**data abstractions**

```elixir
# instances the abstraction
days =
  MapSet.new()
  # modifies
  |> MapSet.put(:monday)
  # modifies
  |> MapSet.put(:tuesday)

# query
MapSet.member?(days, :monday)
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir

```
